import os
import numpy as np
import array
from math import ceil
from PIL import Image
from pyunpack import Archive

def unzip_file(filepath, des_path):
    '''
    zip 파일에 대해 압축을 자동으로 해제하는 메소드
    :param file: Full File Path
    :param des_path: 실제 파일이 저장될 장소
    :return: 압축이 해제된 File Path
    '''
    des = des_path + '/' + filepath.split('/')[-1].split('.')[-2].strip()
    #des = FILEPATH/FILENAME/
    if not os.path.exists(des):
        os.mkdir(des)

    Archive(filepath).extractall(des)

    return des


def file_search_by_obj(filepath):
    '''
    파일 경로에 검사 대상 파일이 있는지 검사하고,
    검사 대상 파일을 반환하는 메소드
    :param filepath:
    :return: 검사 대상 파일(Full_filePath)
    '''
    objlist = ['.exe', '.bat', 'bin', '.dll', '.xlsm', '.pptm']

    find_obj = []

    if '.' in filepath:
        # 단일 파일일 경우,
        for obj in objlist:
            if obj in filepath:
                find_obj.append(filepath)
        return find_obj

    files = os.listdir(filepath)

    for file in files:
        for o in objlist:
            if o in file:
                find_obj.append(filepath + '/' + file)

    return find_obj


def file_search_by_keyword(filepath, lookup_keyword_list):
    '''
    특정 파일 path에서 keyword를 가진 파일을 찾아내는 메소드
    :param filepath:
    :param lookup_keyword_list: 찾고자할 키워드 -> list형태
    :return: 찾은 키워드들의 list
    '''
    files = os.listdir(filepath)

    find_file_list = []
    for file in files:
        for l in lookup_keyword_list:
            if l in file:
                find_file_list.append(filepath + '/' + file)

    return find_file_list


def bytes2png(f, width, save_dir):
    '''
    실제 .txt의 정보를 읽어들여서 이미지화 시키는 메소드
    :param f: filename
    :param width: image width
    :param save_dir: 저장 장소
    :return: image 저장 장소
    '''
    undecodedByte = 'FF'

    file = f

    """
        Construct image name and return if file already exists
    """
    image_name = f.split('.')[1]
    image_buf = image_name.split('/')
    image_name = './Images' + '/' + image_buf[2] + '.png'
    if os.path.isfile(image_name):
        print('Image already exists: {}'.format(image_name))
        return image_name

    # 이미지 저장 경로 설정
    # Images 폴더가 없으면 새로 생성
    if not os.path.exists(save_dir + '\\Images'):
        os.mkdir(save_dir + '\\Images')

    b_data = array.array('i')
    for line in open(file, 'r'):
        for byte in line.rstrip().split():
            # 각 라인마다 앞의 8개의 코드는 주소를 뜻하므로, 제외함.
            # 실제 데이터에서 가져올 때에는 주소 개념이 없음.

            # byte가 ??인 파트는 따로 처리하는 작업
            # 이 부분이 정확도에 크게 기여하는 곳이므로, 처리할 필요가 있음.
            if byte == '??':
                byte = undecodedByte

            # 간혹 byte 코드에 \\이라고 적힌 부분이 있어서 건너뛰어야 함.
            if byte.__contains__('\\'):
                continue

            b_data.append(int(byte, base=16))
            # 16진수 형태로 배열에 부착함

    height = ceil(len(b_data) / width)
    if len(b_data) < (width * height):
        b_data += array.array('i', (0,) * (width * height - len(b_data)))
    image_buffer = np.fromiter(b_data, dtype=np.uint8).reshape((height, width))
    img = Image.fromarray(image_buffer, 'L')
    img.save(image_name)

    return image_name



# 파일을 읽어 데이터를 리스트로 반환
def read_file(file_path):
    '''
    한 실행파일에 대한 정보를 bytes 코드로 추출하는 메소드
    :param file_path:
    :return: 16진수화한 바이트코드
    '''
    try:
        data_list = []
        with open(file_path, mode="rb") as f:
            while True:
                buf = f.read(16)
                if not buf:
                    break
                else:
                    data_list.append(buf)

        return data_list

    except Exception as ex:
        print("[ERROR] : {0}".format(ex))
        raise Exception(ex) from ex


# data를 hex로 기록한 .txt파일 생성
def create_bytes_file(save_dir, file_name, data):
    '''
    read_file에서 추출한 bytes 코드를 .txt형태로 저장하는 메소드
    :param save_dir:
    :param file_name:
    :param data:
    :return:
    '''
    file_path = save_dir + file_name.split('.')[0] + '.txt'
    try:
        with open(file_path, mode="wb") as f:
            for i in data:
                f.write(b' '.join(['{:02x}'.format(int(x)).upper().encode() for x in list(i)]))
                f.write(b'\r\n')

            print("[생성 완료] {}".format(file_name))

    except Exception as e:
        print(e)

    return file_path.strip()