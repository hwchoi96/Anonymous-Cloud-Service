from Malware_Classification.Virustotal_App import Virustotal_App
from Malware_Classification.Malware_Classification_App import Malware_Classification_App
import Malware_Classification.Malware_Classification_Method as Method
import os
import shutil
import smtplib
from email.mime.text import MIMEText


SAVE_MALWARE_PATH = './need_to_train'


class Malware_App_Manager:
    def __init__(self):
        self.model = Malware_Classification_App()
        self.virustotal = Virustotal_App()

    def input_data(self, filepath):
        '''
        web server에서 서비스 요청시 호출해야할 종합 메소드
        :param filepath: 방금 웹 서버에서 다운로드 받은 파일
        :return: list -> 검사 대상들의 결과를 저장한 list
        (압축 파일에 대해서는 파일이 여러 개이기 때문에, list type임.)
        :return: 0 -> 검사 대상이 아닐 때,
        '''
        if '.zip' in filepath or '.tar' in filepath:
            # 압축 파일이라면, 압축을 해제하고, 그 경로를 받음
            filepath = Method.unzip_file(filepath)

        judge_list = Method.file_search_by_obj(filepath)
        # 경로에 검사 대상 확장자가 있는지 조회
        total_result_list = []

        if judge_list is not []:
            # 검사 대상이 있다면,
            for obj in judge_list:
                m_result = self.model.judge(obj)
                v_result, detected, _, _ = self.virustotal.judge(obj)

                total_result = \
                    self.post_cleaning(obj, m_result, v_result, detected)
                # 후 처리 메소드

                total_result_list.append(total_result)

            for result in total_result_list:
                if result == False:
                    # 검사 결과 중 하나라도 악성코드로 간주되는 경우 못 올림.
                    return False
            return True
        else:
            return 0
            # 검사 대상 파일이 아닐 때,




    def post_cleaning(self, filepath, m, v, de):
        '''
        악성코드 판정 후 처리 메소드
        :param filepath:
        :param m: my model의 판정 결과
        :param v: virustotal의 판정 결과
        :param de: virustotal의 백신이 악성코드로 판정한 횟 수
        :return: 최종 결과
        '''
        if (m == 0) and v == False and de >= 6:
            # 어떤 파일에 대한 결과가 model에서는 감지하지 못하고,
            # virustotal에서도 악성코드라고 6개 이상의 백신이 응답한 경우
            # 추 후에 학습을 위해 저장하여 관리하도록 함.
            img_data = filepath.split('/')[-1]
            img_data = img_data[:-4]
            img_list = os.listdir('./Images')
            img_path = ''

            for img in img_list:
                if img_data in img:
                    img_path = img

            img_path = './Images/' + img_path

            savepath = SAVE_MALWARE_PATH + '/' + img_path.split('/')[-1]
            shutil.copy(img_path, savepath)

            total_result = False
        elif (m == 1 or m == 2) and de >= 6:
            total_result = False
        else:
            total_result = True

        return total_result




    def send_mail(self, filepath, user_email):

        passflag, detected, total, url = self.virustotal.judge(filepath)

        if passflag == True:
            msg = '검사 결과 악성코드가 탐지 되지 않아, 클라우드에 등록하였습니다.'
        else:
            msg = '검사 결과 악성코드로 판정되어, 등록할 수 없습니다.'
        str = '''
                안녕하세요. Anonymous Cloud 서비스를 이용해주셔서 감사합니다.

                파일 분석 결과 알려드립니다.

                Virustotal에 해당 프로그램을 조회한 결과,
                총 %d개의 백신에서 %d개의 백신이 악성코드로 판정했습니다.
                
                %s
                
                %s
                
                - Anonymous Cloud Team -
        ''' % (total, detected, url, msg)

        s = smtplib.SMTP('smtp.gmail.com', 587)
        # TLS 보안 시작
        s.starttls()

        account = 'anonymouscloudteam@gmail.com'
        app_password = 'tzlqlatlavwlkjdh'

        s.login(account, app_password)

        msg = MIMEText(str)
        msg['Subject'] = '[Anonymous Cloud Team] - 파일 분석 결과 알려드립니다.'

        s.sendmail(account, user_email, msg.as_string())

# manager = Malware_App_Manager()
# result = manager.input_data('C:/Users/LAB111PC/Downloads/Phulli.bin')
# print('Malware 테스트 결과 : ', result)
# result = manager.input_data('C:/PycharmProjects/python.exe')
print('Non-malware 테스트 결과 : ', result)
#manager.send_mail('C:/Users/LAB111PC/Downloads/Phulli.bin', '1592034@hansung.ac.kr')